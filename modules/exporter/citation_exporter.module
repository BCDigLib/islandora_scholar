<?php

/**
 * @file
 * Implements hooks and callbacks for this module.
 */

// Hooks.
define('CITATION_EXPORTER_MODIFY_EXPORTING_CITATION_TEXT_HOOK', 'citation_exporter_modify_exporting_citation_text');

require_once dirname(__FILE__) . '/includes/batch.inc';

/**
 * Constants
 */
define('CITATION_EXPORTER_INDEX_SESSION', 'citation_exporter');
define('CITATION_EXPORTER_EXPORT_MENU', 'islandora/citation/export');
define('CITATION_EXPORTER_ADMIN_MENU', 'admin/islandora/tools/citaiton_export');

/**
 * Implements hook_menu().
 */
function citation_exporter_menu() {
  $items = array();
  $items[CITATION_EXPORTER_ADMIN_MENU] = array(
    'title' => 'Citation Exporter',
    'description' => 'Configure citation exporter settings.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citation_exporter_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.form.inc',
  );
  $items[CITATION_EXPORTER_EXPORT_MENU] = array(
    'page callback' => 'citation_exporter_export',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Export citations and redirect the user to another page.
 *
 * Menu callback.
 */
function citation_exporter_export() {
  module_load_include('inc', 'citation_exporter', 'includes/citation.export');
  CitationExporter::Export();
}

/**
 * Implements hook_cron().
 */
function citation_exporter_cron() {
  // Delete sets which have not been touched in a day.
  $sets = db_select('citation_exporter_sets', 's')
    ->fields('s', array('id'))
    ->condition('updated', time() - 86400, '<')
    ->execute()
    ->fetchCol();
  module_load_include('inc', 'citation_exporter', 'includes/db');
  array_map('citation_exporter_drop_set', $sets);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the islandora_bookmark_detailed_form such that validation is added
 * to check the number of objects being exported to put a cap on pdf export
 * for the total number of objects selected.
 */
function citation_exporter_form_islandora_bookmark_detailed_form_alter(array &$form, array &$form_state) {
  if (array_key_exists('islandora_bookmark_export', $form_state)) {
    $form['#validate'][] = 'citation_exporter_validate_for_number_of_pdf_objects';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the islandora_bookmark_results_form such that validation is added
 * to check the number of objects being exported to put a cap on pdf export
 * for the total number of objects selected.
 */
function citation_exporter_form_islandora_bookmark_results_form_alter(array &$form, array &$form_state) {
  $form['#validate'][] = 'citation_exporter_validate_for_number_of_pdf_objects';
}

/**
 * Validate the number of selected objects when pdf exporting.
 *
 * Validates both islandora_bookmark_results_form and
 * islandora_bookmark_detailed_form for the number of objects being exported if
 * the export type is PDF.
 */
function citation_exporter_validate_for_number_of_pdf_objects($form, &$form_state) {
  // XXX: Current limitations with TCPDF and time limits prevent the creation of
  // a large PDF. For now to get around this the system will check the count of
  // objects being exported and allow continue if it's less than the max number
  // of pids that maintain a working PDF export.

  // Validate bookmark export.
  if ($form_state['values']['form_id'] == 'islandora_bookmark_detailed_form') {
    if ($form_state['values']['bookmarks']['fieldset']['export_options'] == 'PDF') {
      // Check selected object count and All objects.
      $selected = count(array_filter($form_state['values']['bookmarks']['fieldset']['table']));
      if ($selected > variable_get('citation_exporter_max_objects_for_pdf_export', 1200)) {
        form_set_error('export_options', t('The number of selected objects exceeds the allowable PDF export limit.'));
      }
      // Check if all results are being exported and get the total number of
      // objects that are being exported.
      if ($form_state['clicked_button']['#value'] == 'Export all bookmarks') {
        $list_id = arg(2);
        if ($list_id) {
          $bookmark = Bookmark::getList($list_id);
          $total_exporting = $bookmark->getPidCount();
          if ($total_exporting > variable_get('citation_exporter_max_objects_for_pdf_export', 1200)) {
            form_set_error('export_options', t('The number of selected objects exceeds the allowable PDF export limit.'));
          }
        }
      }
    }
  }
  // Validate solr results bookmark export.
  elseif ($form_state['values']['form_id'] == 'islandora_bookmark_results_form') {
    if ($form_state['values']['export_options'] == 'PDF') {
      // Check selected object count and All objects.
      $selected = count(array_filter($form_state['values']['islandora_bookmark_table']));
      if ($selected > variable_get('citation_exporter_max_objects_for_pdf_export', 1200)) {
        form_set_error('export_options', t('The number of selected objects exceeds the allowable PDF export limit.'));
      }
      // Check if all results are being exported and get the total number of
      // objects that are being exported.
      if ($form_state['clicked_button']['#value'] == 'Export all results') {
        module_load_include('inc', 'citation_exporter', 'includes/utilities');
        $total_exporting = get_count_of_exporting_objects($form_state['islandora_solr_query_processor']);
        if ($total_exporting > variable_get('citation_exporter_max_objects_for_pdf_export', 1200)) {
          form_set_error('export_options', t('The number of selected objects exceeds the allowable PDF export limit.'));
        }
      }
    }
  }
}
