<?php

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */

/**
 * Construct a citeproc "item" entry.
 *
 * @param mixed $mods
 *   Either a DOMNode or a string representing a MODS record.
 *
 * @return CiteProcJSItem
 *   An "item" which may be added into a "citation" object.
 */
function citeproc_item_from_mods($mods) {
  module_load_include('php', 'citeproc', 'generators/converter');

  $raw = convert_mods_to_citeproc_jsons($mods);

  $item = new CiteProcJSItem();
  $item->set($raw);
  return $item;
}

/**
 * Construct a citeproc "citation" entry.
 *
 * @param mixed $mods
 *   Either a DOMNode or a string, as accepted by citeproc_item_from_mods().
 *
 * @return CiteProcJSCitation
 *   A "citation" object which may be added into a "bibliography".
 */
function citeproc_citation_from_mods($mods) {
  $item = citeproc_item_from_mods($mods);
  $citation = new CiteProcJSCitation();
  $citation->addItem($item);
  return $citation;
}

/**
 * Construct a citeproc bibliography entry.
 *
 * @param CiteProcJSStyle $style
 *   The style in which the bibliography should be rendered.
 *
 * @return CiteProcJSBibliography
 *   A bibliography object.
 */
function citeproc_bibliography_from_mods(CiteProcJSStyle $style, $mods) {
  $citation = citeproc_citation_from_mods($mods);
  $bibliography = new CiteProcJSBibliography($style);
  $bibliography->addCitation($citation);
  return $bibliography;
}

/**
 * Construct a citeproc bibliography entry.
 *
 * @param CiteProcJSStyle $style
 *   The style in which the bibliography should be rendered.
 * @param array $raw
 *   The array of fields to give to citeproc, as generated by the
 *   converter.php.
 *
 * @return CiteProcJSBibliography
 *   A bibliography object containing the provided data.
 */
function citeproc_bibliography_from_raw_array(CiteProcJSStyle $style, array $raw) {
  $item = new CiteProcJSItem();
  $item->set($raw);
  $citation = new CiteProcJSCitation();
  $citation->addItem($item);
  $bibliography = new CiteProcJSBibliography($style);
  $bibliography->addCitation($citation);

  return $bibliography;
}

/**
 * Get the default style.
 *
 * @return CiteProcJSStyle
 *   Get the style which has been set as the default (boolean FALSE if there
 *   are no styles).
 */
function citeproc_default_style() {
  module_load_include('inc', 'csl', 'CSL');
  $doc = CSL::GetDefault(TRUE);
  if (!empty($doc)) {
    return new CiteProcJSStyle($doc);
  }
  return FALSE;
}

/**
 * Retrieve the indicated style.
 *
 * @param string $style
 *   A string identifying the style in the database.
 *
 * @return CiteProcJSStyle
 *   Either one of our style object, or boolean FALSE if the indicated style
 *   could not be found.
 */
function citeproc_style($style) {
  module_load_include('inc', 'csl', 'CSL');
  $doc = CSL::Get($style, TRUE);
  if (!empty($doc)) {
    return new CiteProcJSStyle($doc);
  }
  return FALSE;
}

/**
 * Get an value which should be unique in the output being rendered.
 *
 * Was using uniqid(); however, it can be slower than cold molasses...
 * Possibly using /dev/random behind the scenes, which blocks for 'better'
 * randomness...  Anyway...  This works.
 *
 * @return string
 *   ID to use in citeproc HTML IDs
 */
function citeproc_get_id() {
  $i = &drupal_static(__FUNCTION__, 0);
  return format_string('citeproc_idnum_!id', array(
    '!id' => $i++,
  ));
}

